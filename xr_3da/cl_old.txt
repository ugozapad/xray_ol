BOOL CObjectSpace::Collision( CCFModel* object, bool bAll, bool bGetTris, Fvector* dir, float range )
{
	_CHECK				( object );
	VERIFY				( object->owner );

	collide_list.Clear	( );
	tris_list.Clear		( );

	Fvector				point;

	if ( dir ){
		point.mul		( *dir, range );
		point.add		( object->owner->Position() );
	}else{
		point.set		( object->owner->Position() );
	}

	object->Enable		( false );
//	int res = GetNearest(point, object->in_radius);
	int res = GetNearest(point, object->objRadius);
	object->EnableRollback( );
	_CHECK				( res );

	Fmatrix33	R1, R2;
	Fvector		T1, T2;
	T1.set		( 0,0,0 );
	T2.set		( 0,0,0 );
	CCFModel*		target;


	object->owner->mTransform.get_rapid(R1);
	object->owner->mTransform.get_translate(T1);
	if ( dir ) T1.set( point );

	for ( set<CCFModel*>::iterator nl_idx=nearest_list.begin(); nl_idx!=nearest_list.end(); nl_idx++ ){
		target			= *nl_idx;

		if (!object->owner->OnNear(target)) continue;

		target->owner->mTransform.get_rapid(R2);
		target->owner->mTransform.get_translate(T2);

		XRC.Collide	(  R1,	T1,	1.0f, &object->model,
			           R2,	T2,	1.0f, &target->model);

		if ( XRC.GetModelContactCount() ){
			if (!object->owner->OnCollide(target)) continue;
			collide_list.Add( target );
			if (bGetTris)
				for (int i=0; i<XRC.GetModelContactCount(); i++)
					AddToTrisList( target, &target->model.tris[XRC.ModelContact[i].id2] );
		}
	}

	return collide_list.count;
}

int CObjectSpace::Collide( CCFModel *object, CCFModel *target, bool bAll )
{
	Fmatrix33	R1, R2;
	Fvector		T1, T2;

	object->owner->mTransform.get_rapid(R1);
	object->owner->mTransform.get_translate(T1);
	target->owner->mTransform.get_rapid(R2);
	target->owner->mTransform.get_translate(T2);

	XRC.Collide(R1,	T1,	1.0f, &object->model,
				R2,	T2,	1.0f, &target->model);

	return XRC.GetModelContactCount();
}

BOOL CObjectSpace::GetFieldTris( Fvector &start, Fvector &dir,	float radius, float range )
{
	tris_list.Clear		( );
	if ( !GetField		( start, dir, radius, range ) ) _FAIL;

	for ( set<CCFModel*>::iterator I=nearest_list.begin(); I!=nearest_list.end(); I++)
		AddToTrisList	( *I, NULL );

	return ( tris_list.count );
}

